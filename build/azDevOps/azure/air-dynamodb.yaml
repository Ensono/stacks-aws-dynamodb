name: "$(Build.SourceBranchName)-init"

pr:
  - main

trigger:
  branches:
    include:
      - 'main'
  paths:
    include:
      - '*'
variables:
  - template: air-dynamodb-setup.yml

env:
  # The following SECRETS must be defined per environment (which must match environment key) in your GH Repository:
  #   AWS_ACCESS_KEY_ID
  #   AWS_ACCOUNT_ID
  #   AWS_DEFAULT_REGION
  #   AWS_SECRET_ACCESS_KEY
  #   AWS_TF_STATE_BUCKET
  #   AWS_TF_STATE_DYNAMOTABLE
  #   AWS_TF_STATE_ENCRYPTION
  #   AWS_TF_STATE_KEY
  #   AWS_TF_STATE_REGION
  CLOUD_PROVIDER: "aws"
  TaskctlVersion: '1.4.2'
  DOCKER_IMAGE_TAG: "0.0.${{ github.RUN_NUMBER }}"
  DOCKER_IMAGE_NAME: "stacks-api"
  DOCKER_REGISTRY_NAME: "${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.eu-west-2.amazonaws.com"
  OWNER: "stacks_team"
  REGION: "{{ .Project.Cloud.Region }}"
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  # K8S Configuration
  K8S_RESOURCE_FILE: "deploy/k8s/aws/api-deploy.yml"
  # K8S Additional Deploy-Templater var substitutions
  DOCKER_REGISTRY: "${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.eu-west-2.amazonaws.com" # #TODO: Parse this with region, duplicates DOCKER_REGISTRY_NAME
  K8S_APP_ROUTE: "/api/menu"
  # App Config (for both TF and K8S)
  RESOURCE_DEF_NAME: "{{ .Project.Name }}-api"
  COMPONENT: "api"
  ROLE: "backend"
  APP_NAME: "{{ .Input.Business.Domain }}-{{ .Project.Name }}-api"
  DOMAIN: "{{ .Input.Business.Domain }}"
  COMPANY: "{{ .Input.Business.Company }}"
  PROJECT: "{{ .Project.Name }}"

stages:
  - stage: Build
    variables:
      - group: amido-stacks-infra-credentials-nonprod
      - group: stacks-credentials-nonprod-kv

    jobs:
      - job: Validate
        pool:
          vmImage: $(pool_vm_image)

        steps:
          - template: ../templates/air-dynamodb-setup.yml
            parameters:
              TaskctlVersion: ${{ variables.TaskctlVersion }}

          - task: Bash@3
            displayName: "TaskCTL: Setup"
            inputs:
              targetType: inline
              script: taskctl setup
            env:
              DOCKER_IMAGE_TAG: $(version_number)

          - task: Bash@3
            displayName: "TaskCTL: Lint"
            inputs:
              targetType: inline
              script: taskctl lint
            env:
              # DynamoDB
              TF_FILE_LOCATION: deploy/aws/app/kube
              PROJECT_NAME: stacks-aws-dynamodb
              BUILD_BUILDNUMBER: 0.0.${{env.GITHUB_RUN_NUMBER}}
              SELF_REPO_SRC: $(self_repo_src)
              CLOUD_PROVIDER: "$(cloud_provider)"
              # AWS ECR Authorisation
              AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              AWS_DEFAULT_REGION: ${{ env.REGION }}

  - stage: NonProd
    dependsOn: Build
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
      - group: amido-stacks-infra-credentials-nonprod
      - group: stacks-credentials-nonprod-kv
      - name: Environment.ShortName
        value: dev
      # Available in Terraform Output, but not yet enabled to export as pipeline vars
      - name: dns_base_domain
        value: nonprod.amidostacks.com
      - name: core_environment
        value: nonprod
    jobs:
      - deployment: InfraNonProd
        pool:
          vmImage: $(pool_vm_image)
        environment: ${{ variables.domain }}-nonprod
        strategy:
          runOnce:
            deploy:
              steps:
                - template: ../templates/air-dynamodb-setup.yml
                  parameters:
                    TaskctlVersion: ${{ variables.TaskctlVersion }}

                - task: Bash@3
                  displayName: "Taskctl: Infrastructure"
                  inputs:
                    targetType: inline
                    script: taskctl infrastructure
                    informationPreference: continue
                  env:
                    ENV_NAME: nonprod
                    # AWS Authentication
                    CLOUD_PROVIDER: "$(cloud_provider)"
                    # AWS Environmental Config
                    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                    AWS_DEFAULT_REGION: ${{ env.REGION }}
                    # Terraform Backend Configuration
                    AWS_TF_STATE_BUCKET: ${{ secrets.AWS_TF_STATE_BUCKET }}
                    AWS_TF_STATE_DYNAMOTABLE: ${{ secrets.AWS_TF_STATE_DYNAMOTABLE }}
                    AWS_TF_STATE_ENCRYPTION: ${{ secrets.AWS_TF_STATE_ENCRYPTION }}
                    AWS_TF_STATE_KEY: ${{ secrets.AWS_TF_STATE_KEY }}
                    AWS_TF_STATE_REGION: ${{ secrets.AWS_TF_STATE_REGION }}
                    TF_FILE_LOCATION: deploy/aws/app/kube
                    TF_BACKEND_ARGS: region=${{ secrets.AWS_TF_STATE_REGION }},access_key=${{ secrets.AWS_ACCESS_KEY_ID }},secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }},bucket=${{ secrets.AWS_TF_STATE_BUCKET }},key=${{ secrets.AWS_TF_STATE_KEY }},dynamodb_table=${{ secrets.AWS_TF_STATE_DYNAMOTABLE }},encrypt=${{ secrets.AWS_TF_STATE_ENCRYPTION }}
                    # Terraform Resource Configuration
                    TF_VAR_env: "nonprod"
                    TF_VAR_owner: ${{ env.OWNER }}
                    TF_VAR_region: ${{ env.REGION }}
                    TF_VAR_docker_image_name: ${{ env.DOCKER_IMAGE_NAME }}
                    TF_VAR_create_docker_repositories: true # Required for one environment per AWS account
                    TF_VAR_stage: "nonprod"
                    TF_VAR_name_company: ${{ env.COMPANY }}
                    TF_VAR_name_project: ${{ env.PROJECT }}
                    TF_VAR_name_domain: "{{ env.DOMAIN }}"
                    # K8S Target Configuration
                    K8S_CLUSTER_TARGET: "" # i.e. "amido-stacks-dev-h0ax6owA" TODO: To be read from core state
                    K8S_CLUSTER_IDENTIFIER: "${{ env.REGION }}"
                    NAMESPACE: "nonprod-${{ env.DOMAIN }}"

